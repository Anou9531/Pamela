;; Copyright Â© 2017 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;; Acknowledgement and Disclaimer:
;; This material is based upon work supported by the Army Contracting
;; and DARPA under contract No. W911NF-15-C-0005.
;; Any opinions, findings and conclusions or recommendations expressed
;; in this material are those of the author(s) and do necessarily reflect the
;; views of the Army Contracting Command and DARPA.

;; Test of the grammar change introducing symbol-ref

;; A symbol-ref A.B.C ... is used as a function -OR- as an argval
;;   A is method arg, pclass arg, field
;;   B+ field, method (previous symbol is a pclass instance)

;; symbol-ref could reference a
;;   pclass-arg(1) :arg-reference
;;   method-arg(1) :method-arg-reference
;;                 :state-variable
;;   field(1+)     :field-reference
;;                 :field-reference-field :field-reference-mode
;;   method(1+)    :plant-fn (should be method reference)

;; cond-operand = ( literal | mode-expr | symbol-ref )
;;   :arg-reference :method-arg-reference :state-variable :field-reference

;; mode-expr = <LP> <MODE_OF> symbol-ref keyword <RP>
;;   symbol-ref could be...
;;   :arg-reference :method-arg-reference :state-variable :field-reference

;; field-type = ( literal | lvar-ctor | !lvar-ctor pclass-ctor |
;;                mode-expr | symbol-ref )
;;   symbol-ref could be...
;;   :arg-reference :state-variable

;; plant-fn = <LP> symbol-ref plant-opt* argval* <RP>
;;   symbol-ref could be...
;;   :plant-fn

;; number-ref = ( number | lvar-ctor | symbol-ref )
;;   symbol-ref could be...
;;   :arg-reference :method-arg-reference :state-variable :field-reference

;; pclass-ctor-arg = ( string | number | pclass-arg-keyword | boolean | symbol-ref )
;;   symbol-ref could be...
;;   :arg-reference :state-variable :field-reference

;; argval = ( string | number | safe-keyword | boolean | symbol-ref )
;;   symbol-ref could be...
;;   :arg-reference :method-arg-reference :state-variable :field-reference


(defpclass simple-pclass [simple2-initial]
  :fields {simple1 {:observable true :initial "white"}
           simple2 {:observable true :initial simple2-initial}}
  :methods [(defpmethod simple-method []
              )]
  )

(defpclass example [pclass-arg]
  :fields {field1 3.14
           field2 (simple-pclass "black")}
  :methods [(defpmethod main []
              (my-method pclass-arg field1 field2.simple2))
            (defpmethod my-method [a b c]
              )
            ])
