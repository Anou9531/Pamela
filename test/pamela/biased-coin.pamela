;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;; Acknowledgement and Disclaimer:
;; This material is based upon work supported by the Army Contracting
;; and DARPA under contract No. W911NF-15-C-0005.
;; Any opinions, findings and conclusions or recommendations expressed
;; in this material are those of the author(s) and do necessarily reflect the
;; views of the Army Contracting Command and DARPA.

;; A coin that transitions between biased and unbiased mode

(defpclass face-up []
  :meta {:doc "Observed value of the coin after flip"}
  :modes [:head :tail])

(defpclass coin []
  :modes [:biased :unbiased]

  :fields {:observed-face (face-up :observable true :initial :head)}

  :transitions {:biased:unbiased   {:pre         :biased :post :unbiased
                                    :probability (lvar "tBU" 0.1)}
                :unbiased:biased   {:pre         :unbiased :post :biased
                                    :probability (lvar "tUB" 0.1)}
                :biased:biased     {:pre         :biased :post :biased
                                    :probability (lvar "tBB" 0.9)}
                :unbiased:unbiased {:pre         :unbiased :post :unbiased
                                    :probability (lvar "tUU" 0.9)}}

  :methods [(defpmethod emit-head
              {:doc "Heads"
               :pre (= :observed-face (mode-of face-up :head))}
              [])
            (defpmethod emit-tail
              {:doc "Tails"
               :pre (= :observed-face (mode-of face-up :tail))}
              [])
            (defpmethod flip
              {:doc "Flip the coin"
               :primitive true} ;; plant method with an estimation model
              []
              (choose
                (choice :guard (= :biased true)
                  (choose
                    (choice :probability (lvar "eBH" 0.9)
                      (emit-head))
                    (choice :probability (lvar "eBT" 0.1)
                      (emit-tail))))
                (choice :guard (= :unbiased true)
                  (choose
                    (choice :probability (lvar "eUH" 0.50)
                      (emit-head))
                    (choice :probability (lvar "eUT" 0.50)
                      (emit-tail))))))
            (defpmethod flip-3
              {:doc "Series of 3 coin flips"}
              []
              (dotimes 3 (flip)))
            (defpmethod flip-1000
              {:doc "Series of 1000 coin flips"}
              []
              (dotimes 1000 (flip)))
            ])

(defpclass main []
  :fields {:coin (coin :id "coin-plant")})
