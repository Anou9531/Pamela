{planttest
 {:args [plant],
  :meta {:doc "Plant Test"},
  :methods
  {main
   [{:args [],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Main",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :sequence,
       :body
       [{:type :plant-fn-symbol,
         :name plant,
         :method hardwork,
         :args [10],
         :temporal-constraints [{:type :bounds, :value [10 20]}]}
        {:type :plant-fn-symbol,
         :name plant,
         :method scp,
         :args ["bigfile" "me@192.168.11.100:~me/copyofbigfile"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :plant-fn-symbol,
         :name plant,
         :method cp,
         :args ["bigfile" "copyofbigfile"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :plant-fn-symbol,
         :name plant,
         :method shell,
         :args ["ls" "-lart" ">" "foo"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :plant-fn-symbol,
         :name plant,
         :method python,
         :args ["myscript.py" "2" "3" "4" "5"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :delay,
         :body nil,
         :temporal-constraints [{:type :bounds, :value [3 3]}]}
        {:type :plant-fn-symbol,
         :name plant,
         :method stop,
         :args ["McDonalds"]}]}],
     :doc "The HTN"}]},
  :type :pclass},
 simple-plant-demo
 {:args [],
  :fields
  {:run
   {:access :private,
    :initial {:args [sp1], :pclass planttest, :type :pclass-ctor},
    :observable false},
   :sp1
   {:access :private,
    :initial
    {:args [],
     :id "myplant",
     :interface "RMQ",
     :pclass simpleplant,
     :plant-part "mypart",
     :type :pclass-ctor},
    :observable false}},
  :type :pclass},
 simpleplant
 {:args [],
  :meta {:doc "The Simple Plant Example"},
  :methods
  {cp
   [{:args [fromfile tofile],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Cp",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "local file copy"}],
   hardwork
   [{:args [time],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [1 20]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Hardwork",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Simulated work with a simulated failure"}],
   python
   [{:args [script options arg1 arg2 arg3],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Python",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Runs a python script"}],
   scp
   [{:args [fromfile tofile],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [10 20]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Scp",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Secure network file copy"}],
   shell
   [{:args [cmd arg1 arg2 arg3],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 3]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Shell",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Runs a command-line program"}],
   stop
   [{:args [area],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 1]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Stop",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Stops the plant"}]},
  :type :pclass}}
