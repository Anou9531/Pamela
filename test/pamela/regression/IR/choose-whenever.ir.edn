{choice-tpn1
 {:args [plant],
  :fields
  {priority
   {:access :private,
    :initial {:name "plant-priority", :type :lvar},
    :observable false}},
  :meta {:doc "New choose-whenever example"},
  :methods
  {choose-by-priority
   [{:args [],
     :betweens [],
     :body
     [{:type :choose-whenever,
       :body
       [{:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant one]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 1}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant acquire]},
          :args [:foo]},
         :leave
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant release]},
          :args [:foo]}}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant two]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 2}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant acquire]},
          :args [:bar]},
         :leave
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant release]},
          :args [:bar]}}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant three]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 3}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant acquire]},
          :args [:baz]},
         :leave
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant release]},
          :args [:baz]}}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant four]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 4}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant acquire]},
          :args [:xyzzy]},
         :leave
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [plant release]},
          :args [:xyzzy]}}]}],
     :controllable false,
     :cost 0,
     :display-name "Choose By Priority",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 choice-tpn2
 {:args [plant],
  :fields
  {priority
   {:access :private,
    :initial {:type :literal, :value 4},
    :observable false}},
  :meta {:doc "New choose-whenever example"},
  :methods
  {choose-by-priority
   [{:args [],
     :betweens [],
     :body
     [{:type :choose-whenever,
       :body
       [{:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant one]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 1}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [set-priority]},
          :args [1]}}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant two]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 2}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [set-priority]},
          :args [2]}}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant three]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 3}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [set-priority]},
          :args [3]}}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant four]},
           :args []}],
         :condition
         {:type :equal,
          :args
          [{:type :field-ref, :names [priority]}
           {:type :literal, :value 4}]},
         :enter
         {:type :method-fn,
          :method-ref {:type :symbol-ref, :names [set-priority]},
          :args [4]}}]}],
     :controllable false,
     :cost 0,
     :display-name "Choose By Priority",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   set-priority
   [{:args [new-priority],
     :betweens [],
     :body
     [{:type :assert,
       :condition
       {:type :equal,
        :args
        [{:type :field-ref, :names [priority]}
         {:type :method-arg-ref, :names [new-priority]}]},
       :body nil}],
     :controllable false,
     :cost 0,
     :display-name "Set Priority",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 plant
 {:args [],
  :meta {:doc "The Plant API"},
  :methods
  {acquire
   [{:args [resource],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Acquire",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   four
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Four",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   one
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "One",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   release
   [{:args [resource],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Release",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   three
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Three",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   two
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Two",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 pamela/lvars {:lvars {"plant-priority" :unset}, :type :lvars}}
