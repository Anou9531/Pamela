{host
 {:args [],
  :methods
  {file-transfer
   [{:args [server-host size],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this ftp]},
         :args
         [{:type :method-arg-ref, :names [server-host]}
          {:type :method-arg-ref, :names [size]}]}]}],
     :controllable false,
     :cost 0,
     :display-name "File Xfer",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   ftp
   [{:args [server-host size],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Ftp",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   sleep
   [{:args [duration-secs],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Sleep",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   video
   [{:args [client server display],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Video",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   video-session
   [{:args [client-host server-host display],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :delay,
         :body nil,
         :temporal-constraints [{:type :bounds, :value [15 15]}]}
        {:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this video]},
         :args
         [{:type :method-arg-ref, :names [client-host]}
          {:type :method-arg-ref, :names [server-host]}
          {:type :method-arg-ref, :names [display]}]}]}],
     :controllable false,
     :cost 0,
     :display-name "Video Session",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 main
 {:args [],
  :fields
  {e1h1
   {:access :private,
    :initial
    {:args [],
     :id "actuator",
     :pclass host,
     :plant-part "host0101",
     :type :pclass-ctor},
    :observable false},
   e7h1
   {:access :private,
    :initial
    {:args [],
     :id "actuator",
     :pclass host,
     :plant-part "host0701",
     :type :pclass-ctor},
    :observable false}},
  :meta {:doc "This defines all of the HTN methods for this domain"},
  :methods
  {main
   [{:args [],
     :betweens [],
     :body
     [{:type :method-fn,
       :method-ref {:type :symbol-ref, :names [this main-internal]},
       :args ["host0101" "host0701"]}],
     :controllable false,
     :cost 0,
     :display-name "Main Activity",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   main-internal
   [{:args [server-host client-host],
     :betweens [],
     :body
     [{:type :parallel,
       :body
       [{:type :method-fn,
         :method-ref {:type :field-ref, :names [e7h1 file-transfer]},
         :args [{:type :method-arg-ref, :names [server-host]} "100MB"],
         :temporal-constraints [{:type :bounds, :value [1 7]}]}
        {:type :method-fn,
         :method-ref {:type :field-ref, :names [e7h1 video-session]},
         :args
         [{:type :method-arg-ref, :names [client-host]}
          {:type :method-arg-ref, :names [server-host]}
          "1"],
         :temporal-constraints [{:type :bounds, :value [20 35]}]}]}],
     :controllable false,
     :cost 0,
     :display-name "test1",
     :doc "The top-level task for this mission",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass}}
