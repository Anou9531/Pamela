{plant
 {:args [],
  :meta {:doc "The Plant API"},
  :methods
  {do-a
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 1,
     :display-name "Do A",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [2 4]}]}],
   do-b
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Do B",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 3,
     :temporal-constraints [{:type :bounds, :value [3 6]}]}],
   do-c
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Do C",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   do-d
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Do D",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 7]}]}],
   do-e
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Do E",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [9 16]}]}],
   do-f
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Do F",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 3]}]}],
   do-g
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 3,
     :display-name "Do G",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [2 5]}]}]},
  :type :pclass},
 tpn-costs
 {:args [plnt],
  :meta {:doc "A TPN example with costs and rewards."},
  :methods
  {start
   [{:args [],
     :betweens
     [{:type :between,
       :from :choice,
       :to :b,
       :temporal-constraints [{:type :bounds, :value [1 50]}],
       :cost<= 7,
       :reward>= 1}],
     :body
     [{:type :parallel,
       :body
       [{:type :sequence,
         :body
         [{:type :plant-fn-symbol, :name plnt, :method do-a, :args []}
          {:type :plant-fn-symbol,
           :name plnt,
           :method do-b,
           :args [],
           :label :b}],
         :cost<= 4,
         :reward>= 2}
        {:type :sequence,
         :body
         [{:type :choose,
           :body
           [{:type :choice,
             :body
             [{:type :sequence,
               :body
               [{:type :plant-fn-symbol,
                 :name plnt,
                 :method do-d,
                 :args [],
                 :cost 1,
                 :reward 2}
                {:type :plant-fn-symbol,
                 :name plnt,
                 :method do-e,
                 :args [],
                 :cost 2,
                 :reward 1}]}]}
            {:type :choice,
             :body
             [{:type :sequence,
               :body
               [{:type :plant-fn-symbol,
                 :name plnt,
                 :method do-f,
                 :args [],
                 :cost 3,
                 :reward 1}
                {:type :plant-fn-symbol,
                 :name plnt,
                 :method do-g,
                 :args [],
                 :cost 4}]}]}],
           :label :choice,
           :cost<= 10,
           :reward>= 5}
          {:type :plant-fn-symbol,
           :name plnt,
           :method do-c,
           :args []}]}],
       :temporal-constraints [{:type :bounds, :value [1 100]}],
       :cost<= 11,
       :reward>= 6}],
     :controllable false,
     :cost 0,
     :display-name "Start",
     :doc "TPN method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass}}
