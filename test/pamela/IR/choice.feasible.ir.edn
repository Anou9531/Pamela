{choice-feasible
 {:args [],
  :meta {:doc "A feasible choice to be chewed by contraint solver"},
  :methods
  {main
   [{:args [],
     :betweens [],
     :body
     [{:type :choose,
       :body
       [{:type :choice,
         :body
         [{:type :plant-fn-symbol,
           :name this,
           :method option,
           :args [],
           :temporal-constraints [{:type :bounds, :value [55 65]}]}]}
        {:type :choice,
         :body
         [{:type :plant-fn-symbol,
           :name this,
           :method option,
           :args [],
           :temporal-constraints [{:type :bounds, :value [65 75]}]}]}
        {:type :choice,
         :body
         [{:type :plant-fn-symbol,
           :name this,
           :method option,
           :args [],
           :temporal-constraints [{:type :bounds, :value [75 85]}]}]}],
       :temporal-constraints [{:type :bounds, :value [50 100]}]}],
     :controllable false,
     :cost 0,
     :display-name "Main",
     :doc "Entry point",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   option
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Option",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass}}
