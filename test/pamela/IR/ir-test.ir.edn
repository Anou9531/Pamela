{all-clear {:type :state-variable},
 box
 {:args [],
  :fields
  {:ball-in-motion
   {:access :public,
    :initial {:type :literal, :value false},
    :observable true},
   :dummy
   {:access :private,
    :initial {:name :gensym, :type :lvar},
    :observable false},
   :fred
   {:access :private,
    :initial {:name "fred", :type :lvar},
    :observable false},
   :pwr
   {:access :private,
    :initial {:mode :high, :pclass pwrvals, :type :mode-reference},
    :observable false}},
  :meta
  {:depends {pwrvals "0.2.0"},
   :doc "Box",
   :icon "box.svg",
   :version "0.0.1"},
  :methods
  {close-lid
   [{:args [],
     :betweens [],
     :body nil,
     :controllable true,
     :cost 100,
     :display-name "Close Lid",
     :doc "Close method",
     :post {:type :mode-reference, :pclass this, :mode :close},
     :pre {:type :mode-reference, :pclass this, :mode :open},
     :primitive true,
     :reward 1000,
     :temporal-constraints [{:type :bounds, :value [123 456]}]}],
   open-lid
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Open Lid",
     :post {:type :mode-reference, :pclass this, :mode :open},
     :pre {:type :mode-reference, :pclass this, :mode :close},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   reset
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Reset",
     :post {:type :mode-reference, :pclass this, :mode :open},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :modes
  {:close {:type :literal, :value true},
   :open {:type :literal, :value true}},
  :transitions
  {:close:open
   {:cost 10,
    :doc "lid opens",
    :post
    {:args
     [{:type :equal,
       :args
       [{:type :field-reference, :pclass this, :field :pwr}
        {:type :mode-reference, :pclass pwrvals, :mode :high}]}
      {:type :equal,
       :args
       [{:type :field-reference, :pclass this, :field :fred}
        {:type :literal, :value 123.456}]}
      {:type :mode-reference, :pclass this, :mode :wacky}],
     :type :and},
    :pre {:mode :close, :pclass this, :type :mode-reference},
    :probability 0.99,
    :reward 100,
    :temporal-constraints [{:type :bounds, :value [12 34]}]},
   :open:close
   {:doc "lid closes",
    :post {:mode :close, :pclass this, :type :mode-reference},
    :pre {:mode :open, :pclass this, :type :mode-reference}}},
  :type :pclass},
 cannon
 {:args [],
  :fields
  {:ammunitions
   {:access :private,
    :initial {:type :literal, :value 5},
    :observable true},
   :ready
   {:access :public,
    :initial {:type :literal, :value false},
    :observable true}},
  :methods
  {fire
   [{:args [arg1 arg2],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Fire",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   reset
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Reset",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 2]}]}]},
  :type :pclass},
 game
 {:args [power],
  :fields
  {:box-f
   {:access :private,
    :initial {:args [], :pclass box, :type :pclass-ctor},
    :observable false},
   :cannon-f
   {:access :private,
    :initial
    {:args [],
     :id "first-cannon",
     :interface "ZMQ",
     :pclass cannon,
     :type :pclass-ctor},
    :observable false}},
  :methods
  {main
   [{:args [initial-state],
     :betweens
     [{:type :between,
       :from :my,
       :to :pickme,
       :temporal-constraints [{:type :bounds, :value [50 :infinity]}]}
      {:type :between-starts, :from :doit, :to :aaa, :cost<= 51}
      {:type :between-ends, :from :chance, :to :bbb, :reward>= 17}],
     :body
     [{:type :parallel,
       :body
       [{:type :whenever,
         :condition
         {:type :equal,
          :args
          [{:type :field-reference-field,
            :pclass this,
            :field :box-f,
            :value :ball-in-motion}
           {:type :literal, :value true}]},
         :body
         [{:type :tell,
           :condition
           {:type :equal,
            :args
            [{:type :state-variable, :name all-clear}
             {:type :state-variable, :name initial-state}]}}]}
        {:type :whenever,
         :condition
         {:type :equal,
          :args
          [{:type :field-reference-field,
            :pclass this,
            :field :cannon-f,
            :value :ready}
           {:type :literal, :value true}]},
         :body
         [{:type :unless,
           :condition
           {:type :equal,
            :args
            [{:type :field-reference-field,
              :pclass this,
              :field :cannon-f,
              :value :ammunitions}
             {:type :literal, :value 0}]},
           :body
           [{:type :try,
             :body
             [{:type :sequence,
               :body
               [{:type :assert,
                 :condition
                 {:type :equal,
                  :args
                  [{:type :field-reference,
                    :pclass this,
                    :field :box-f}
                   {:type :mode-reference, :pclass box, :mode :open}]},
                 :body nil}
                {:type :maintain,
                 :condition
                 {:type :equal,
                  :args
                  [{:type :field-reference,
                    :pclass this,
                    :field :box-f}
                   {:type :mode-reference, :pclass box, :mode :open}]},
                 :body
                 [{:type :sequence,
                   :body
                   [{:type :plant-fn-field,
                     :field :cannon-f,
                     :method fire,
                     :args [123.45 "456"],
                     :temporal-constraints
                     [{:type :bounds, :value [1 7]}]}
                    {:type :ask,
                     :condition
                     {:type :equal,
                      :args
                      [{:type :state-variable, :name all-clear}
                       {:type :literal, :value true}]},
                     :body nil,
                     :temporal-constraints
                     [{:type :bounds, :value [200 300]}]}],
                   :label :my,
                   :temporal-constraints
                   [{:type :bounds, :value [98 101]}],
                   :cost<= 11,
                   :reward>= 90}]}
                {:type :plant-fn-field,
                 :field :box-f,
                 :method close-lid,
                 :args []}
                {:type :choose,
                 :body
                 [{:type :choice,
                   :body [{:type :delay, :body nil, :label :aaa}],
                   :label :chance,
                   :cost 9,
                   :reward 99,
                   :probability 0.67}
                  {:type :choice,
                   :body [{:type :delay, :body nil, :label :bbb}],
                   :temporal-constraints
                   [{:type :bounds, :value [7 8]}],
                   :condition
                   {:type :equal,
                    :args
                    [{:type :field-reference,
                      :pclass this,
                      :field :box-f}
                     {:type :mode-reference,
                      :pclass box,
                      :mode :open}]}}],
                 :label :pickme,
                 :temporal-constraints
                 [{:type :bounds, :value [36 37]}],
                 :cost<= 45,
                 :reward>= 46}]}],
             :catch
             [{:type :sequence,
               :body
               [{:type :parallel,
                 :body
                 [{:type :plant-fn-field,
                   :field :box-f,
                   :method reset,
                   :args []}
                  {:type :plant-fn-field,
                   :field :cannon-f,
                   :method reset,
                   :args []}]}
                {:type :delay,
                 :body nil,
                 :temporal-constraints
                 [{:type :bounds, :value [30 30]}]}]}],
             :temporal-constraints
             [{:type :bounds, :value [2 20]}]}]}]}
        {:type :sequence,
         :body
         [{:type :delay,
           :temporal-constraints
           [{:type :bounds, :value [0 :infinity]}],
           :body nil}
          {:type :plant-fn-field,
           :field :box-f,
           :method reset,
           :args []}
          {:type :delay,
           :temporal-constraints
           [{:type :bounds, :value [0 :infinity]}],
           :body nil}
          {:type :plant-fn-field,
           :field :cannon-f,
           :method reset,
           :args []}
          {:type :delay,
           :temporal-constraints
           [{:type :bounds, :value [0 :infinity]}],
           :body nil}],
         :label :slack-sequence}
        {:type :parallel,
         :body
         [{:type :sequence,
           :body
           [{:type :delay,
             :temporal-constraints
             [{:type :bounds, :value [0 :infinity]}],
             :body nil}
            {:type :plant-fn-field,
             :field :box-f,
             :method reset,
             :args []}
            {:type :delay,
             :temporal-constraints
             [{:type :bounds, :value [0 :infinity]}],
             :body nil}]}
          {:type :sequence,
           :body
           [{:type :delay,
             :temporal-constraints
             [{:type :bounds, :value [0 :infinity]}],
             :body nil}
            {:type :plant-fn-field,
             :field :cannon-f,
             :method reset,
             :args []}
            {:type :delay,
             :temporal-constraints
             [{:type :bounds, :value [0 :infinity]}],
             :body nil}]}],
         :label :slack-parallel}
        {:type :choose,
         :body
         [{:type :choice,
           :body
           [{:type :delay,
             :temporal-constraints [{:type :bounds, :value [0 0]}],
             :body nil}]}
          {:type :choice,
           :body
           [{:type :plant-fn-field,
             :field :cannon-f,
             :method reset,
             :args []}]}],
         :label :optional}
        {:type :sequence,
         :body
         [{:type :choose,
           :body
           [{:type :choice,
             :body
             [{:type :delay,
               :temporal-constraints [{:type :bounds, :value [0 0]}],
               :body nil}]}
            {:type :choice,
             :body
             [{:type :plant-fn-field,
               :field :box-f,
               :method reset,
               :args []}]}]}
          {:type :choose,
           :body
           [{:type :choice,
             :body
             [{:type :delay,
               :temporal-constraints [{:type :bounds, :value [0 0]}],
               :body nil}]}
            {:type :choice,
             :body
             [{:type :plant-fn-field,
               :field :cannon-f,
               :method reset,
               :args []}]}]}],
         :label :soft-sequence}
        {:type :parallel,
         :body
         [{:type :choose,
           :body
           [{:type :choice,
             :body
             [{:type :delay,
               :temporal-constraints [{:type :bounds, :value [0 0]}],
               :body nil}]}
            {:type :choice,
             :body
             [{:type :plant-fn-field,
               :field :box-f,
               :method reset,
               :args []}]}]}
          {:type :choose,
           :body
           [{:type :choice,
             :body
             [{:type :delay,
               :temporal-constraints [{:type :bounds, :value [0 0]}],
               :body nil}]}
            {:type :choice,
             :body
             [{:type :plant-fn-field,
               :field :cannon-f,
               :method reset,
               :args []}]}]}],
         :label :soft-parallel}],
       :temporal-constraints [{:type :bounds, :value [1 60]}]}],
     :controllable false,
     :cost 0,
     :display-name "Main",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   main-test
   [{:args [],
     :betweens [],
     :body
     [{:type :plant-fn-symbol,
       :name this,
       :method main,
       :args [true]}],
     :controllable false,
     :cost 0,
     :display-name "Main Test",
     :doc "Unit test method entry point",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :modes
  {:bizarre
   {:args
    [{:type :field-reference-field,
      :pclass this,
      :field :cannon-f,
      :value :ammunitions}
     {:type :literal, :value 5}],
    :type :equal},
   :wacky {:type :literal, :value true},
   :weird
   {:args
    [{:type :equal,
      :args
      [{:type :field-reference-field,
        :pclass this,
        :field :box-f,
        :value :pwr}
       {:type :mode-reference, :pclass pwrvals, :mode :high}]}
     {:type :equal,
      :args
      [{:type :arg-reference, :name power}
       {:type :mode-reference, :pclass pwrvals, :mode :high}]}
     {:type :equal,
      :args
      [{:type :state-variable, :name global-state}
       {:type :literal, :value true}]}],
    :type :and}},
  :type :pclass},
 global-state {:type :state-variable},
 initial-state {:type :state-variable},
 pwrvals
 {:args [],
  :meta {:doc "Enum for power values", :version "0.2.0"},
  :modes
  {:high {:type :literal, :value true},
   :none {:type :literal, :value true}},
  :type :pclass},
 pamela/lvars {:lvars {"fred" :unset}, :type :lvars}}
