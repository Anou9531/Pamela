{bar {:type :state-variable},
 door {:type :state-variable},
 foo {:type :state-variable},
 main
 {:args [],
  :fields
  {field1
   {:access :private,
    :initial
    {:args ["black"], :pclass simple-pclass, :type :pclass-ctor},
    :observable false}},
  :methods
  {initialize
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Initialize",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   main
   [{:args [],
     :betweens [],
     :body
     [{:type :plant-fn-symbol,
       :name this,
       :method test-of-various-statements,
       :args []}],
     :controllable false,
     :cost 0,
     :display-name "Main",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   one-arg-method
   [{:args [x],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "One Arg Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   test-of-various-statements
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :plant-fn-symbol,
         :name this,
         :method one-arg-method,
         :args
         [{:type :field-reference, :pclass field1, :field simple2}]}
        {:type :assert,
         :condition
         {:type :equal,
          :args
          [{:type :state-variable, :name foo}
           {:type :literal, :value :illuminated}]},
         :body nil,
         :temporal-constraints [{:type :bounds, :value [3 5]}]}
        {:type :ask,
         :condition
         {:type :equal,
          :args
          [{:type :state-variable, :name bar}
           {:type :literal, :value :dead}]},
         :body nil,
         :temporal-constraints [{:type :bounds, :value [4 7]}]}
        {:type :ask,
         :condition
         {:type :equal,
          :args
          [{:type :field-reference-field,
            :pclass this,
            :field field1,
            :value simple2}
           {:type :literal, :value "white"}]},
         :body nil,
         :temporal-constraints [{:type :bounds, :value [4 7]}]}
        {:type :tell,
         :condition
         {:type :equal,
          :args
          [{:type :state-variable, :name door}
           {:type :literal, :value :open}]}}
        {:type :plant-fn-symbol,
         :name this,
         :method initialize,
         :args []}]}],
     :controllable false,
     :cost 0,
     :display-name "Test Of Various Statements",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 simple-pclass
 {:args [simple2-initial],
  :fields
  {simple1
   {:access :private,
    :initial {:type :literal, :value "white"},
    :observable true},
   simple2
   {:access :private,
    :initial {:name simple2-initial, :type :arg-reference},
    :observable true}},
  :methods
  {simple-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Simple Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass}}
