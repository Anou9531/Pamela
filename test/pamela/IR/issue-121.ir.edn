{main
 {:args [],
  :methods
  {and-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "And Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   ask-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Ask Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   assert-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Assert Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   between-ends-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Between Ends Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   between-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Between Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   between-starts-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Between Starts Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   catch-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Catch Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   choice-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Choice Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   choose-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Choose Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   choose-whenever-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Choose Whenever Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   defpclass-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Defpclass Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   defpmethod-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Defpmethod Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   delay-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Delay Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   dotimes-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Dotimes Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   false-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "False Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   implies-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Implies Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   lvar-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Lvar Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   main
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :plant-fn-symbol,
         :name this,
         :method and-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method ask-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method assert-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method between-ends-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method between-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method between-starts-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method catch-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method choice-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method choose-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method choose-whenever-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method defpclass-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method defpmethod-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method delay-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method dotimes-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method false-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method implies-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method lvar-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method maintain-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method mode-of-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method not-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method optional-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method or-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method parallel-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method sequence-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method slack-parallel-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method slack-sequence-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method soft-parallel-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method soft-sequence-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method tell-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method true-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method try-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method unless-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method when-method,
         :args []}
        {:type :plant-fn-symbol,
         :name this,
         :method whenever-method,
         :args []}]}],
     :controllable false,
     :cost 0,
     :display-name "Main",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive false,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   maintain-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Maintain Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   mode-of-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Mode Of Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   not-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Not Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   optional-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Optional Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   or-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Or Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   parallel-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Parallel Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   sequence-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Sequence Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   slack-parallel-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Slack Parallel Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   slack-sequence-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Slack Sequence Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   soft-parallel-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Soft Parallel Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   soft-sequence-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Soft Sequence Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   tell-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Tell Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   true-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "True Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   try-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Try Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   unless-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Unless Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   when-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "When Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   whenever-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-name "Whenever Method",
     :post {:type :literal, :value true},
     :pre {:type :literal, :value true},
     :primitive true,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass}}
